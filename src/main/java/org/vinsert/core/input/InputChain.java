package org.vinsert.core.input;

import org.vinsert.api.MethodContext;

import java.awt.*;
import java.awt.event.InputEvent;
import java.util.ArrayList;
import java.util.List;

/**
 * Date: 29/08/13
 * Time: 09:15
 *
 * @author Matt Collinge
 */
public abstract class InputChain<T extends InputEvent> {

    protected final MethodContext context;
    protected List<T> eventList;
    protected List<Integer> sleepList;

    public InputChain(MethodContext context) {
        this.context = context;
        eventList = new ArrayList<>();
        sleepList = new ArrayList<>();
    }

    /**
     * Gets the target component that the events will be dispatched to.
     *
     * @return target Component.
     */
    protected final Component getComponent() {
        return context.client.getCanvas();
    }

    /**
     * Add the InputEvent and sleep time to the internal lists.
     *
     * @param event InputEvent to add.
     * @param sleep Sleep time to add.
     */
    public final void addEvent(T event, int sleep) {
        eventList.add(event);
        sleepList.add(sleep);
    }

    /**
     * Concatenates 2 InputChains of the same type.
     *
     * @param inputEventChain Chain to add.
     * @return the new InputChain, the instance.
     */
    public final InputChain<T> concat(InputChain<T> inputEventChain) {
        eventList.addAll(inputEventChain.eventList);
        sleepList.addAll(inputEventChain.sleepList);
        return this;
    }

    /**
     * Gets an Array of events generated by the InputChain.
     *
     * @return Array of InputEvents
     */
    public final List<T> getEvents() {
        return eventList;
    }

    /**
     * Gets the Array of sleep times associated with the InputEvent list.
     *
     * @return Array of sleep times.
     */
    public final int[] getSleepTimes() {
        int[] sleeps = new int[sleepList.size()];
        for (int i = 0; i < sleeps.length; i++) {
            sleeps[i] = sleepList.get(i);
        }
        return sleeps;
    }

}
